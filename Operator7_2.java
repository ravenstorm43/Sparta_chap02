public class Operator7_2 {
    public static void main(String[] args) {
        int num1 = 8, num2 = -8;
        System.out.println("8의 2진수 = " + Integer.toBinaryString(num1)); // 1000
        System.out.println("-8의 2진수 = " + Integer.toBinaryString(num2)); // 11111111111111111111111111111000
        System.out.println("-9의 2진수 = " + Integer.toBinaryString(-9)); // 11111111111111111111111111110111

        System.out.println("& 연산자에 의한 결과 = " + (num1 & num2));
        /*
         00000000000000000000000000001000
       & 11111111111111111111111111111000
       ------------------------------------
         00000000000000000000000000001000 (8)
         */
        System.out.println("| 연산자에 의한 결과 = " + (num1 | num2));
        /*
         00000000000000000000000000001000
       | 11111111111111111111111111111000
       ------------------------------------
         11111111111111111111111111111000 (-8)
         */
        System.out.println("^ 연산자에 의한 결과 = " + (num1 ^ num2));
        /*
         00000000000000000000000000001000
       ^ 11111111111111111111111111111000
       ------------------------------------
         11111111111111111111111111110000 (-16)
         */
        System.out.println("~ 연산자에 의한 결과 = " + (~num1));
        /*
       ~ 00000000000000000000000000001000
       ------------------------------------
         11111111111111111111111111110111 (-9)
         */
        System.out.println("<< 연산자에 의한 결과 = " + (num1 << 2)); // 왼쪽으로 2비트 이동 num1*2^2과 같음
        System.out.println(">> 연산자에 의한 결과 = " + (num2 >> 2)); // 부호 비트는 유지하고 오른쪽으로 2비트 이동 num2/2^2과 같음

        System.out.println(">>> 연산자에 의한 결과 = " + (num2 >>> 2));
        // 부호비트도 포함에서 오른쪽으로 2비트 이동
        // 빈공간은 0이므로 부호비트가 0이됨 따라서 양수로 취급하고 완전히 새로운 값이 나옴
    }
}
